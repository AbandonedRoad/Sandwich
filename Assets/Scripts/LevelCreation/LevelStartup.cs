//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18444
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using UnityEngine.UI;
using Singleton;
using Player;
using System.Linq;
using Enums;
using UnityStandardAssets.Characters.FirstPerson;

namespace LevelCreation
{
	public class LevelStartup : MonoBehaviour
	{
		public int Seed;

		/// <summary>
		/// Starts the level.
		/// </summary>
		public void StartLevel()
		{
            HelperSingleton.Instance.DestroyLevel();

            var controller = PlayerSingleton.Instance.Player.GetComponentInChildren<PlayerCrawlerController>();

            if (controller != null)
            {
                controller.Reset();
            }

            if (Seed > 0)
			{
                StartCoroutine(PrefabSingleton.Instance.LevelGenerator.CreateNewLevel(Seed));

                PlayerSingleton.Instance.CoinAmount = 0;
                PlayerSingleton.Instance.LevelStartDate = DateTime.Now;
                PlayerSingleton.Instance.PlayerPosition = new Vector2(0, 0);

				PlayerSingleton.Instance.Player.GetComponent<FallDamage>().ApplyNormal();
                PlayerSingleton.Instance.Player.GetComponent<PlayerUpdates>().ResetHealth();

                // Set Player to correct position.
                var firstBlock = CalculationSingleton.Instance.ActualCreationScope.ActualLevel[0];
                var secondBlock = CalculationSingleton.Instance.ActualCreationScope.ActualLevel[1];
                PlayerSingleton.Instance.Player.transform.position = new Vector3(firstBlock.LevelBlock.transform.position.x, 1.9f, firstBlock.LevelBlock.transform.position.z);

                if (CalculationSingleton.Instance.ActualCreationScope.FirstHorizontalDirection == HorzDirection.Left
                    || CalculationSingleton.Instance.ActualCreationScope.FirstHorizontalDirection == HorzDirection.Right)
                {
                    PlayerSingleton.Instance.Player.transform.rotation = CalculationSingleton.Instance.ActualCreationScope.FirstHorizontalDirection == HorzDirection.Left
                        ? Quaternion.Euler(new Vector3(0, 90, 0))
                        : Quaternion.Euler(new Vector3(0, 270, 0));
                }
                else if (CalculationSingleton.Instance.ActualCreationScope.FirstHorizontalDirection == HorzDirection.Forward
                    || CalculationSingleton.Instance.ActualCreationScope.FirstHorizontalDirection == HorzDirection.Backwards)
                {
                    PlayerSingleton.Instance.Player.transform.rotation = CalculationSingleton.Instance.ActualCreationScope.FirstHorizontalDirection == HorzDirection.Forward
                        ? Quaternion.Euler(new Vector3(0, 0, 0))
                        : Quaternion.Euler(new Vector3(0, 180, 0));
                }

                PlayerSingleton.Instance.FacingDirection = CalculationSingleton.Instance.ActualCreationScope.FirstHorizontalDirection;
                PrefabSingleton.Instance.LevelGeneratorAftermath.DuplicateHandling(true);
            }
			else
			{
				// Debug.LogError("No Seed! Level will not be creatd!");
			}

            DebugSingleton.Instance.UpdateDebugDate();
        }
	}
}