//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18444
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Linq;
using UnityEngine;
using UnityEngine.UI;
using Singleton;
using UnityEngine.EventSystems;
using System.Collections.Generic;

namespace Menu
{
	public class InputHandler : MonoBehaviour
	{
		public GameObject Panel 
		{
			get { return _inputHandler; }
		}
		
		private GameObject _inputHandler;
		private Dictionary<string, InputField> _fieldNames = new Dictionary<string, InputField>();
		private Dictionary<string, KeyCode> _fieldValues = new Dictionary<string, KeyCode>();
		private Button _abortButton;
		private Button _saveButton;

		/// <summary>
		/// Start this instance.
		/// </summary>
		void Start()
		{
			_inputHandler = GameObject.Find("InputPanel");

			_fieldNames.Add("JumpField", _inputHandler.GetComponentsInChildren<InputField>().First(btn => btn.name == "JumpField"));
			_fieldNames.Add("CrouchField", _inputHandler.GetComponentsInChildren<InputField>().First(btn => btn.name == "CrouchField"));
			_fieldNames.Add("ForwardField", _inputHandler.GetComponentsInChildren<InputField>().First(btn => btn.name == "ForwardField"));
			_fieldNames.Add("BackwardField", _inputHandler.GetComponentsInChildren<InputField>().First(btn => btn.name == "BackwardField"));
			_fieldNames.Add("LeftField", _inputHandler.GetComponentsInChildren<InputField>().First(btn => btn.name == "LeftField"));
			_fieldNames.Add("RightField", _inputHandler.GetComponentsInChildren<InputField>().First(btn => btn.name == "RightField"));

			_fieldValues.Add("JumpField", KeyCode.None);
			_fieldValues.Add("CrouchField", KeyCode.None);
			_fieldValues.Add("ForwardField", KeyCode.None);
			_fieldValues.Add("BackwardField", KeyCode.None);
			_fieldValues.Add("LeftField", KeyCode.None);
			_fieldValues.Add("RightField", KeyCode.None);

			_saveButton = _inputHandler.GetComponentsInChildren<Button>().First(btn => btn.name == "SaveButton");
			_abortButton = _inputHandler.GetComponentsInChildren<Button>().First(btn => btn.name == "AbortButton");
			
			// This is a setup for a button that grabs the field value when pressed
			_saveButton.onClick.AddListener(() => SaveSettings());
			_abortButton.onClick.AddListener(() => Abort());

			_fieldNames["JumpField"].text = PlayerSingleton.Instance.Jump.ToString();
			_fieldNames["CrouchField"].text = PlayerSingleton.Instance.Crouch.ToString();
			_fieldNames["ForwardField"].text = PlayerSingleton.Instance.Forward.ToString();
			_fieldNames["BackwardField"].text = PlayerSingleton.Instance.Backwards.ToString();
			_fieldNames["LeftField"].text = PlayerSingleton.Instance.Left.ToString();
			_fieldNames["RightField"].text = PlayerSingleton.Instance.Right.ToString();

			SwitchInputPanel();
		}

		/// <summary>
		/// Raises the GU event.
		/// </summary>
		void OnGUI() 
		{
			Event evnt = Event.current;

			if (EventSystem.current.currentSelectedGameObject == null || evnt == null)
			{
				return;
			}

			string name = EventSystem.current.currentSelectedGameObject.name;
			KeyCode code = Input.GetKey(KeyCode.LeftShift) ? KeyCode.LeftShift : evnt.keyCode;
			code = code == KeyCode.None && Input.GetKey(KeyCode.RightShift) ? KeyCode.RightShift : code;
			if (!_fieldNames.Keys.Contains(name) || evnt.isKey || code == KeyCode.None)
			{
				return;
			}

			if (_fieldValues[name] != code)
			{
				_fieldValues[name] = code;
				_fieldNames[name].text = _fieldValues[name].ToString();
				_fieldNames[name].enabled = false;
				_fieldNames[name].enabled = true;
			}
		}
		
		/// <summary>
		/// Switchs the scene end panel.
		/// </summary>
		public void SwitchInputPanel()
		{
			_inputHandler.SetActive(!_inputHandler.activeSelf);
			if (_inputHandler.activeSelf)
			{
				_inputHandler.transform.SetAsLastSibling();
			}
		}
		
		/// <summary>
		/// Adapts the worker speed.
		/// </summary>
		/// <param name="newValue">New value.</param>
		private void SaveSettings()
		{			
			PlayerPrefs.SetString("JUMP", _fieldValues["JumpField"].ToString());
			PlayerPrefs.SetString("CROUCH", _fieldValues["CrouchField"].ToString());
			PlayerPrefs.SetString("FORWARD", _fieldValues["ForwardField"].ToString());
			PlayerPrefs.SetString("BACKWARD", _fieldValues["BackwardField"].ToString());
			PlayerPrefs.SetString("LEFT", _fieldValues["LeftField"].ToString());
			PlayerPrefs.SetString("RIGHT", _fieldValues["RightField"].ToString());

			PlayerPrefs.Save();

			SwitchInputPanel();
		}
		
		/// <summary>
		/// Adapts the worker speed.
		/// </summary>
		/// <param name="newValue">New value.</param>
		private void Abort()
		{
			
		}
	}
}