//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18444
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Linq;
using UnityEngine;
using UnityEngine.UI;
using Singleton;
using Assets.Scripts.Campaign;
using Random = UnityEngine.Random;
using System;

namespace Menu
{
	public class MenuHandler : MonoBehaviour
	{
        /// <summary>
        /// The Panel inwhich the menu is
        /// </summary>
		public GameObject MainMenuPanel 
		{
			get { return _menuPanel; }
		}
		
		private GameObject _menuPanel;
        private Button _exitButton;
		private Button _campaignButton;
		private Button _skirmishButton;
		private Button _optionsButton;
        private Button _restartButton;
        private Text _seedInput;

        /// <summary>
        /// Start this instance.
        /// </summary>
        void Awake()
		{
			_menuPanel = GameObject.Find("StartPanel");

            _campaignButton = MainMenuPanel.GetComponentsInChildren<Button>().First(btn => btn.name == "CampaignButton");
			_skirmishButton = MainMenuPanel.GetComponentsInChildren<Button>().First(btn => btn.name == "SkirmishButton");
			_optionsButton = MainMenuPanel.GetComponentsInChildren<Button>().First(btn => btn.name == "OptionsButton");
			_exitButton = MainMenuPanel.GetComponentsInChildren<Button>().First(btn => btn.name == "ExitButton");
            _restartButton = MainMenuPanel.GetComponentsInChildren<Button>().First(btn => btn.name == "RestartButton");
            _seedInput = MainMenuPanel.GetComponentsInChildren<Text>().First(inp => inp.name == "SeedInput");

            // This is a setup for a button that grabs the field value when pressed
            _campaignButton.onClick.AddListener(() => StartCampaign());
			_skirmishButton.onClick.AddListener(() => StartSkirmish());
			_optionsButton.onClick.AddListener(() => ShowOptions());
			_exitButton.onClick.AddListener(() => ExitGame());
            _restartButton.onClick.AddListener(() => RestartGame());
        }
	
		/// <summary>
		/// Switchs the scene end panel.
		/// </summary>
		public void SwitchStartPanel()
		{
            MainMenuPanel.SetActive(!MainMenuPanel.activeSelf);
			if (MainMenuPanel.activeSelf)
			{
                MainMenuPanel.transform.SetAsLastSibling();
			}
		}

        /// <summary>
        /// Adapts the worker speed.
        /// </summary>
        /// <param name="newValue">New value.</param>
        private void StartCampaign()
		{			
			SwitchStartPanel();

            PrefabSingleton.Instance.CampaignHandler.SwitchCampaignPanel();
		}

		/// <summary>
		/// Starts a skirmish game
		/// </summary>
		/// <param name="newValue">New value.</param>
		private void StartSkirmish()
		{
			SwitchStartPanel();

            int textureType = Random.Range(0, 2);

            CalculationSingleton.Instance.ActualCreationScope.ActualCampaign = (Campaigns)textureType;

            int newValue;
            if (int.TryParse(_seedInput.text, out newValue))
            {
                PrefabSingleton.Instance.LevelStartup.Seed = HelperSingleton.Instance.CreateSeed(newValue);
            }
            else
            {
                PrefabSingleton.Instance.LevelStartup.Seed = HelperSingleton.Instance.CreateSeed();
            }                

            PrefabSingleton.Instance.LevelStartup.StartLevel();
		}

		/// <summary>
		/// Shows the options
		/// </summary>
		private void ShowOptions()
		{
			SwitchStartPanel();
			PrefabSingleton.Instance.InputHandler.SwitchInputPanel();
		}
		
		/// <summary>
		/// Exits the game.
		/// </summary>
		private void ExitGame()
		{
			
		}

        /// <summary>
        /// Restarts the Current Level.
        /// </summary>
        private void RestartGame()
        {
            PrefabSingleton.Instance.LevelStartup.StartLevel();
        }
    }
}